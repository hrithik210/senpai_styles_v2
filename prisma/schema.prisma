// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  addresses Address[]
  
  @@map("users")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  firstName  String
  lastName   String
  address    String
  apartment  String?
  city       String
  state      String
  zipCode    String
  country    String  @default("India")
  phone      String?
  isDefault  Boolean @default(false)
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  @@map("addresses")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String?
  image       String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems OrderItem[]
  
  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  addressId     String
  status        OrderStatus @default(PENDING)
  subtotal      Float
  shipping      Float       @default(0)
  tax           Float       @default(0)
  total         Float
  paymentMethod String      @default("cashfree")
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paymentSessionId  String?     // from Cashfree
  cashfreeOrderId   String?     // from Cashfree
  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  size      String
  price     Float
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // This will store hashed passwords
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}
